variables:
   VERSION: 1.0.${CI_PIPELINE_ID}


stages:
   - build
   - test
   - sonar
   - release
   - deploy


  
include:
  - template: Security/SAST.gitlab-ci.yml 
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'








build-frontend-code-job:
  stage: build
  when: manual
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $MY_DOCKER_USER -p $MY_DOCKER_PASS
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:        
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA



sonarqube:
  stage: sonar
  when: manual
  image: sonarsource/sonar-scanner-cli
  script:
    - cd frontend
    - >
      sonar-scanner 
      -Dsonar.projectKey=${SONAR_B_PROJECT_KEY}
      -Dsonar.sources=.
      -Dsonar.host.url=${SONAR_HOST_URL}
      -Dsonar.login=${SONAR_B_LOGIN} 
      -Dsonar.projectName=14_SERGEYKLIMACHEV_BACKEND


release:
  variables:
    GIT_STRATEGY: none
  image: docker:latest
  stage: release
  when: manual
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $MY_DOCKER_USER -p $MY_DOCKER_PASS
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д),то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest





deploy:
  variables:
    CI_DEBUG_TRACE: "true"
    VERSION: 1.0.${CI_PIPELINE_ID}
  stage: deploy
  image: alpine:3.15.0
  # если хотим сделать деплой по кнопке
  # rules:
  #   - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #     when: manual
  #   - if: '$CI_COMMIT_BRANCH == "master"'
  #     when: manual
  before_script:
    - apk add openssh-client bash docker-compose
    # - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose.yml
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";  
       export "REGISTRY_USER=$CI_REGISTRY_USER";
       export "REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD";
       export "REGISTRY=$CI_REGISTRY";
      /bin/bash -s " < ./frontend/frontend_deploy.sh 

  environment:
    name: staging
    url: http://std-014-65.praktikum-services.tech/







