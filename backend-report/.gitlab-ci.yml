variables:
   VERSION: 1.0.${CI_PIPELINE_ID}

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'





stages:
  - build
  - sonar
  - release
  - deploy













build:
  variables:
    CI_DEBUG_TRACE: "true"
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $MY_DOCKER_USER -p $MY_DOCKER_PASS
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend-report
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA



sonarqube-backend-sast:
  stage: sonar
  image: sonarsource/sonar-scanner-cli # тот самый docker-образ, о котором мы все узнаем в  будущем
  script:
    - cd backend-report
    - >
    sonar-scanner \
      -Dsonar.projectKey=${SONAR_R_PROJECT_KEY} \
      -Dsonar.sources=. \
      -Dsonar.host.url=${SONAR_HOST_URL} \
      -Dsonar.login=${SONAR_R_LOGIN} 





release:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $MY_DOCKER_USER -p $MY_DOCKER_PASS
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend-report:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend-report:latest



deploy:
  stage: deploy
  image: vault:1.11.3
  before_script:
    - apk add openssh-client bash docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - export VAULT_ADDR="${VAULT_ADDR}"
    - scp ./docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose.yml
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "VAULT_ADDR=${VAULT_ADDR}";
       export "SPRING_DATA_MONGODB_URI=$(vault kv get -field=spring.data.mongodb.uri secret/sausage-store)";
       export "CI_PROJECT_NAMESPACE=${CI_PROJECT_NAMESPACE}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "CI_REGISTRY=${CI_REGISTRY}";
      /bin/bash -s " < ./backend-report/backend-report_deploy.sh 
  needs:
    - release







  environment:
    name: staging
    url: http://std-014-65.praktikum-services.tech/
