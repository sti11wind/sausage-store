cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository
    - ${CI_PROJECT_DIR}/backend/target
variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку 




stages:
  - build
  - test
  - sonar
  - release
  - deploy



include:
  - template: Security/SAST.gitlab-ci.yml 
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

spotbugs-sast:
  variables:
    CI_DEBUG_TRACE: "true"
  stage: test
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 16
    BACKEND_BUILD_DIR: ${CI_PROJECT_DIR}/backend/target
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository 






build:
  variables:
    CI_DEBUG_TRACE: "true"
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $MY_DOCKER_USER -p $MY_DOCKER_PASS
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA




sonarqube-backend-sast:
  stage: sonar
  image: maven:3.8-openjdk-16 # тот самый docker-образ, о котором мы все узнаем в  будущем
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_B_PROJECT_KEY}
      -Dsonar.host.url=${SONAR_HOST_URL}
      -Dsonar.login=${SONAR_B_LOGIN} 
      -Dsonar.projectname=14_SERGEYKLIMACHEV_BACKEND

release:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $MY_DOCKER_USER -p $MY_DOCKER_PASS
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest



deploy:
  stage: deploy
  image: vault:1.11.3
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - export VAULT_ADDR="${VAULT_ADDR}"
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "VAULT_ADDR=${VAULT_ADDR}";
       export "SPRING_DATASOURCE_URL=jdbc:postgresql://${PSQL_HOST}:${PSQL_PORT}/${PSQL_DBNAME}";
       export "SPRING_DATA_MONGODB_URI=$(vault kv get -field=spring.data.mongodb.uri secret/sausage-store)";
       export "SPRING_DATASOURCE_USERNAME=$(vault kv get -field=spring.datasource.username secret/sausage-store)";
       export "SPRING_DATASOURCE_PASSWORD=$(vault kv get -field=spring.datasource.password secret/sausage-store)";
       export "CI_PROJECT_NAMESPACE=${CI_PROJECT_NAMESPACE}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "CI_REGISTRY=${CI_REGISTRY}";
      /bin/bash -s " < ./backend/backend_deploy.sh 
  needs:
    - release


  environment:
    name: staging
    url: http://std-014-65.praktikum-services.tech/
