variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

before_script:
  #устанавливаем ssh-agent для удобства аутентификации по ssh
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  #сохраняем сгенеренный ранее приватный ключ для раннера
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 600 ~/.ssh
  - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

stages:
  - build
  - test
  - sonar
  - notify
  - deploy

  
include:
  - template: Security/SAST.gitlab-ci.yml 

spotbugs-sast:
  stage: test
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository # не забудьте при сборке также указывать эту папку через аргумент -Dmaven.repo.local 




build-backend-code-job:
  stage: build
  only:
    changes:
    - backend/*
  script:
    - cd backend
    - mvn -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -s settings.xml -Dversion.application=${VERSION} -DskipTests deploy 
  artifacts:
    paths:
      - backend/target/sausage-store-${VERSION}.jar
      - ${CI_PROJECT_DIR}/.m2/ 

sonarqube-backend-sast:
  stage: sonar
  image: maven:3.8-openjdk-16 # тот самый docker-образ, о котором мы все узнаем в  будущем
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_B_PROJECT_KEY}
      -Dsonar.host.url=${SONAR_HOST_URL}
      -Dsonar.login=${SONAR_B_LOGIN} 
      -Dsonar.projectname=14_SERGEYKLIMACHEV_BACKEND


telegram-notification-backend:
  stage: notify
  dependencies:
    - build-backend-code-job 
  only:
    changes:
    - backend/*
  script:
    - echo $JOB_ID
    - curl -X POST -H 'Content-type:application/json' --data '{"chat_id":"-1001823350512", "text":"Вышла новая версия сосисочной — '"$VERSION"' Скачать бэкенд можно по ссылке — '"$NEXUS_REPO_URL/sausage-store-klimachev-sergey-backend/com/yandex/practicum/devops/sausage-store/$VERSION/sausage-store-$VERSION.jar"' "}' https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage 
  needs:
    - build-backend-code-job
cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository # для хранения зависимостей бэкенда

deploy:
  stage: deploy
  script:
     #выполняем простую команду для проверки
     - ssh ${DEV_USER}@${DEV_HOST} "id" 
     - ssh ${DEV_USER}@${DEV_HOST}
  # скачиваем ранее собранный артефакт с Nexus. При этом необходимо заранее
  # прописать креды от Nexus в переменные в настройке пайплайна
     - curl -u ${NEXUS_REPO_USER}:${NEXUS_REPO_PASS} -o sausage-store-${VERSION}.jar $NEXUS_REPO_URL/sausage-store-klimachev-sergey-backend/com/yandex/practicum/devops/sausage-store/$VERSION/sausage-store-$VERSION.jar
 # запускаем бэкенд  
     - java -jar sausage-store-${VERSION}.jar & 
